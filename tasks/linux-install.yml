---

# RHEL ------------------------------------------------------------------------
- name: LINUX_INSTALL | RHEL | Zabbix allowed in firewalld
  ansible.posix.firewalld:
    service: zabbix-agent
    permanent: true
    immediate: true
    zone: "{{ firewalld_zone }}"
    state: enabled
  when: ansible_facts.distribution_file_variety == "RHEL"
  notify: restart-zabbix-agent-linux

- name: LINUX_INSTALL | RHEL | Zabbix repo installed
  block:
    - name: Check for zabbix repo file
      ansible.builtin.stat:
        path: /etc/yum.repos.d/zabbix.repo
      register: repopath
    - name: Zabbix repo added
      shell: rpm -Uvh "{{ zabbix_repo_url_rhel }}" && yum clean all
      when: not repopath.stat.exists
  when: ansible_facts.distribution_file_variety == "RHEL"
  notify: restart-zabbix-agent-linux

- name: LINUX_INSTALL | RHEL | Old Zabbix agent absent
  ansible.builtin.yum:
    state: absent
    autoremove: true
    update_cache: true
    name:
      - zabbix4*-agent
  when: ansible_facts.distribution_file_variety == "RHEL"
  notify: restart-zabbix-agent-linux

- name: LINUX_INSTALL | RHEL | Zabbix agent and API installed
  ansible.builtin.yum:
    state: present
    name:
      - "{{ zabbix_agent_package_name }}"
      - "{{ zabbix_api_package_name }}"
  when: ansible_facts.distribution_file_variety == "RHEL"
  notify: restart-zabbix-agent

# SELinux likes to block Zabbix from opening ports.
- name: LINUX_INSTALL | RHEL | Zabbix agent has SELinux exception
  selinux_permissive:
    name: zabbix_agent_t
    permissive: true
  when: ansible_facts.distribution_file_variety == "RHEL"
  notify: restart-zabbix-agent

- name: LINUX_INSTALL | RHEL | /etc/zabbix_agentd.conf deployed
  ansible.builtin.template:
    src: zabbix_agentd.conf.j2
    dest: /etc/zabbix/zabbix_agentd.conf
    owner: root
    group: root
    mode: '0644'
    backup: true
    seuser: system_u
    serole: object_r
    setype: etc_t
  tags: zab_agent_template
  when: ansible_facts.distribution_file_variety == "RHEL"
  notify: restart-zabbix-agent-linux

# UBUNTU ----------------------------------------------------------------------
- name: LINUX_INSTALL | UBUNTU | Zabbix allowed in UFW
  community.general.ufw:
    state: enabled
    rule: allow
    port: "10050"
  when: ansible_facts.distribution_file_variety == "Debian"
  notify: restart-zabbix-agent2-linux

- name: LINUX_INSTALL | UBUNTU | Repo package installed
  ansible.builtin.apt:
    deb: "{{ zabbix_repo_url_ubuntu }}"
  when: ansible_facts.distribution_file_variety == "Debian"
  notify: restart-zabbix-agent2-linux

- name: LINUX_INSTALL | UBUNTU | Packages installed
  ansible.builtin.apt:
    update_cache: true
    name: zabbix-agent2
  when: ansible_facts.distribution_file_variety == "Debian"
  notify: restart-zabbix-agent2-linux

- name: LINUX_INSTALL | /etc/zabbix_agent2.conf deployed
  ansible.builtin.template:
    src: zabbix_agentd.conf.j2
    dest: /etc/zabbix/zabbix_agent2.conf
    owner: root
    group: root
    mode: '0644'
    backup: true
  tags: zab_agent_template
  when: ansible_facts.distribution_file_variety == "Debian"
  notify: restart-zabbix-agent2-linux

# -----------------------------------------------------------------------------
- name: LINUX_INSTALL | PSK deployed
  block:
    - name: LINUX_INSTALL | PSK path exists
      ansible.builtin.file:
        path: "{{ zabbix_agent_tlspskfile | dirname }}"
        state: directory
        mode: "0750"
        owner: zabbix
        group: zabbix
      notify: restart-zabbix-agent-linux
    - name: LINUX_INSTALL | PSK deployed
      ansible.builtin.copy:
        content: "{{ zabbix_psk }}"
        dest: "{{ zabbix_agent_tlspskfile }}"
        mode: "0640"
        owner: zabbix
        group: zabbix
      notify: restart-zabbix-agent-linux
  when: zabbix_agent_TLSPSKFile is defined

- name: LINUX_INSTALL | RHEL | Zabbix agent enabled and running
  ansible.builtin.systemd:
    name: zabbix-agent.service
    state: started
    enabled: true
    masked: false
  when: ansible_facts.distribution_file_variety == "RHEL"

- name: LINUX_INSTALL | UNUNTU | Zabbix agent enabled and running
  ansible.builtin.systemd:
    name: zabbix-agent2.service
    state: started
    enabled: true
    masked: false
  when: ansible_facts.distribution_file_variety == "Debian"

# - name: LINUX_INSTALL | Fix zabbix_api.py
#   become: true
#   block:
# # Depending on the user's version of Python, this file could be in a few different
# #  places. Instead of setting the filepath based on the target's Python version, I
# #  think it's more robust to just search for the file in Python's parent directory.
#     - name: LINUX_INSTALL | Locate zabbix_api.py
#       delegate_to: localhost
#       find:
#         paths:
#           - /usr/lib
#           - /usr/local/lib
#         patterns: zabbix_api.py
#         recurse: true
#       register: zabfile
# # The zabbix_host module requires zabbix_api.py to be present on the host
# #   interacting with the Zabbix Server. If the host has FIPS enabled
# #   (which is a CAT 1 STIG), then this module will fail with an MD5 hash error.
# #   To fix this, the hashlib.md5() function call must include the
# #   "usedforsecurity=False" parameter. The below task edits the
# #   /usr/lib/python[version]/site-packages/zabbix_api.py file on the Ansible
# #   controller so the line calling hashlib.md5 reads as follows:
# # hashed_pw_string = "md5(" + hashlib.md5(l_password.encode('utf-8'), usedforsecurity=False).hexdigest() + ")"
#     - name: LINUX_INSTALL | Fixed zabbix_api.py md5 hash mode
#       lineinfile:
#         path: "{{ item.path }}"
#         regex: ^\s*hashed_pw_string = .*
#         line: '        hashed_pw_string = "md5(" + hashlib.md5(l_password.encode(''utf-8''), usedforsecurity=False).hexdigest() + ")"'
#     #   ^^^ Quotes here are required to keep the leading spaces to match Python's indentation.
#       loop: "{{ zabfile.files }}"
